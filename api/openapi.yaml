openapi: 3.0.0
info:
  title: Room Sensors API
  version: "0.2"
servers:
- url: https://virtserver.swaggerhub.com/Te962/employee-service/0.1
  description: SwaggerHub API Auto Mocking
- url: (http://localhost:8080
  description: Live API Endpoint
paths:
  /sensors:
    get:
      tags:
      - Sensor
      summary: Get list of sensors
      description: Returns a list of available sensors. Pass roomId to get one room
      operationId: getSensors
      parameters:
        - in: query
          name: roomId
          description: mongodb roomId
          schema:
            type: string
      responses:
        "200":
          description: Sensors found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
                x-content-type: application/json
#        "404":
#          description: Not found
      x-swagger-router-controller: Sensor
    put:
      tags:
      - Sensor
      summary: Create/Update Room data
      description: Create or Update Room data (room name, sensors). pass roomId to update existing room, or dont and create new room. Dont pass warnings. Warnings will be reset
      operationId: sensorsPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomInput'
        required: true
      responses:
        "200":
          description: Sensor created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
#        "400":
#          description: Execution Error
      x-swagger-router-controller: Sensor
    delete:
      tags:
        - Sensor
      summary: Delete room/sensor
      description: Delete room/sensor. To delete room, pass roomId. To delete sensor from room, pass roomId and sensorId
      operationId: sensorsDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorDelete'
        required: true
      responses:
        "204":
          description: Room/sensor deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sensor'
#        "400":
#          description: Execution Error
      x-swagger-router-controller: Sensor
    post:
      tags:
      - Sensor
      summary: Add sensor value to database sensorValueEntries
      description: Adds sensor value to database sensorValueEntries
      operationId: sensorsPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorValueInput'
        required: true
      responses:
        "200":
          description: Value added successfully
#        "400":
#          description: Execution Error
      x-swagger-router-controller: Sensor
  /sensorValues:
    get:
      tags:
        - Sensor
      summary: Get sensor values
      description: Returns an array of sensor values according to filter
      operationId: getSensorValues
      parameters:
        - in: query
          name: sensorId
          description: mongodb sensorId
          schema:
            type: string
        - in: query
          name: roomId
          description: mongodb roomId
          schema:
            type: string
        - in: query
          name: sensorType
          description: sensor type
          schema:
            type: string
        - in: query
          name: dateTimeFrom
          description: dateTimeFrom
          schema:
            type: string
        - in: query
          name: dateTimeTo
          description: dateTimeTo
          schema:
            type: string
        - in: query
          name: detail
          description: detail level (avaliable values - days, hours)
          schema:
            type: string
      responses:
        "200":
          description: Sensors found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
                x-content-type: application/json
#        "404":
#          description: Not found
      x-swagger-router-controller: Sensor
  /sensors/warnings:
    put:
      tags:
        - Sensor
      summary: Create/Update sensor warnings
      description: Create or Update Sensor Warnings.
      operationId: sensorsWarningsPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarningInput'
        required: true
      responses:
        "200":
          description: Warning created/updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
#        "400":
#          description: Execution Error
      x-swagger-router-controller: Sensor
    get:
      tags:
        - Sensor
      summary: Get sensor values with warning
      description: Returns a list of values with warnings
      operationId: getWarnings
      parameters:
        - in: query
          name: sensorId
          description: mongodb sensorId
          schema:
            type: string
        - in: query
          name: roomId
          description: mongodb roomId
          schema:
            type: string
        - in: query
          name: sensorType
          description: sensor type
          schema:
            type: string
        - in: query
          name: dateTimeFrom
          description: dateTimeFrom
          schema:
            type: string
        - in: query
          name: dateTimeTo
          description: dateTimeTo
          schema:
            type: string
      responses:
        "200":
          description: Sensors found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SensorValuesWithWarnings'
                x-content-type: application/json
#        "404":
#          description: Not found
      x-swagger-router-controller: Sensor
components:
  schemas:
    Record:
      required:
      - date
      - time
      - value
      type: object
      properties:
        _id:
          type: string
          example: 60853c647960bc20b0cb5da2
        sensorId:
          type: string
          example: 1010
        dateTime:
          type: string
          example: "2020-01-16T09:08:55.000Z"
        value:
          type: string
          example: "37"
      example:
        dateTime: 1461110400000
        id: d290f1ee-6c54-4b01-090e-d701748f0851
        value: "37"
    SensorValuesWithWarnings:
      type: object
      properties:
        sensorValue:
          type: object
          properties:
            _id:
              type: string
              example: 60853c647960bc20b0cb5da2
            sensorId:
              type: string
              example: 1010
            dateTime:
              type: string
              example: "2020-01-16T09:08:55.000Z"
            value:
              type: string
              example: "37"
        sensorWarnings:
          properties:
            _id:
              type: string
              example: 608bf4f96ef769681c7e3526
            warningText:
              type: string
              example: Oh my! That's unexpected. Too cold </3
            threshold:
              type: string
              example: < 5
    Warning:
      type: object
      properties:
        _id:
          type: string
          example: 608bf4f96ef769681c7e3526
        warningText:
          type: string
          example: Oh my! That's unexpected. Too cold </3
        threshold:
          type: string
          example: < 5
      example:
       _id: "608bf4f96ef769681c7e3526"
       warningText: "Oh my! That's unexpected. Too hot <?3"
       threshold: "> 30"
    WarningInput:
      type: object
      properties:
        roomId:
          type: string
          example: 608bb84fcbbf2d6368944395
        sensorId:
          type: string
          example: 608bb84fcbbf2d6368944395
        warningText:
          type: string
          example: Oh my! That's unexpected. Too cold </3
        threshold:
          type: string
          example: < 5
      example:
        roomId: "608bf4f96ef769681c7e3526"
        sensorId: "608bf4f96ef769681c7e3526"
        warnings:
          - warningText: "Oh my! That's unexpected. Too hot <?3"
            threshold: "> 30"
          - warningText: "Oh my! That's unexpected. Too cold </3"
            threshold: "< 17"
    Sensor:
      type: object
      properties:
        _id:
          type: string
          example: 608bf4f96ef769681c7e3526
        sensorType:
          type: string
          example: temperatureSensor
        sensorId:
          type: string
          example: 207
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/Warning'
      example:
        _id: "608bf4f96ef769681c7e3526"
        sensorType: "temperatureSensor"
        sensorId: "207"
        warnings:
          _id: "608bf4f96ef769681c7e3526"
          warningText: "Oh my! That's unexpected. Too hot <?3"
          threshold: "> 30"
    SensorDelete:
      type: object
      properties:
        roomId:
          type: string
          example: d290f1ee-6c54-4b01-090e-d701748f0851
        sensorId:
          type: string
          example: d290f1ee-6c54-4b01-090e-d701748f0851
    SensorInput:
      type: object
      properties:
        sensorType:
          type: string
          example: temperatureSensor
        sensorId:
          type: string
          example: 207
      example:
        sensorType: "temperatureSensor"
        sensorId: "207"
    SensorValueInput:
      type: object
      properties:
        value:
          type: string
          example: 30
        sensorId:
          type: string
          example: "100"
        dateTime:
          type: string
          example: "2020-01-16T09:08:55.000Z"
    roomInput:
      type: object
      properties:
        roomName:
          type: string
          example: POIC_1
    RoomInfo:
      type: object
      properties:
        _id:
          type: string
          example: 608bb84fcbbf2d6368944395
        roomName:
          type: string
          example: POIC_8
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/Sensor'
      example:
        sensorType: temperatureSensor
        id: d290f1ee-6c54-4b01-090e-d701748f0851
    Room:
      type: object
      properties:
        _id:
          type: string
          example: 608bf4f96ef769681c7e3524
        roomName:
          type: string
          example: POS_1
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/Sensor'
      example:
        _id: "608bf4f96ef769681c7e3524"
        roomName: "POS_1"
        sensors:
          - _id: "608bf4f96ef769681c7e3526"
            sensorType: "temperatureSensor"
            sensorId: "207"
            warnings:
              - _id: "608bf4f96ef769681c7e3526"
                warningText: "Oh my! That's unexpected. Too hot <?3"
                threshold: "> 30"
          - _id: "608bf4f96ef769681c7e3526"
            sensorType: "temperatureSensor"
            sensorId: "207"
            warnings:
              - _id: "608bf4f96ef769681c7e3526"
                warningText: "Oh my! That's unexpected. Too hot <?3"
                threshold: "> 30"
          - _id: "608bf4f96ef769681c7e3526"
            sensorType: "temperatureSensor"
            sensorId: "207"
            warnings:
              - _id: "608bf4f96ef769681c7e3526"
                warningText: "Oh my! That's unexpected. Too hot <?3"
                threshold: "> 30"
    RoomInput:
      type: object
      properties:
        _id:
          type: string
          example: 608bf4f96ef769681c7e3524
        roomName:
          type: string
          example: POS_1
        sensors:
          type: array
          items:
            $ref: '#/components/schemas/SensorInput'
      example:
        _id: "608bf4f96ef769681c7e3524"
        roomName: "POS_1"
        sensors:
          - sensorType: "temperatureSensor"
            sensorId: "207"
          - sensorType: "temperatureSensor"
            sensorId: "207"
          - sensorType: "temperatureSensor"
            sensorId: "207"
    RestError:
      type: object
      properties:
        requestId:
          type: string
          example: LMKeaCZ
        httpStatus:
          type: number
          example: 403
        errorCode:
          type: string
          example: ABC00001
        errorMessage:
          type: string
          example: Failed to fetch data from the server
  parameters:
    roomNameParam:
      name: name
      in: path
      description: Room name
      required: true
      style: simple
      explode: false
      schema:
        type: string
    sensorIdParam:
      name: id
      in: path
      description: Sensor id
      required: true
      style: simple
      explode: false
      schema:
        type: string